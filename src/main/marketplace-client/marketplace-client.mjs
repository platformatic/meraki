// This client was generated by Platformatic from an OpenAPI specification.

// The base URL for the API. This can be overridden by calling `setBaseUrl`.
let baseUrl = ''
/**  @type {import('./marketplace-client-types.d.ts').MarketplaceClient['setBaseUrl']} */
export const setBaseUrl = (newUrl) => { baseUrl = newUrl }

async function _getOrganizations (url, request) {
  const headers = {
    'Content-type': 'application/json; charset=utf-8'
  }
  if (request.authorization !== undefined) {
    headers.authorization = request.authorization
    delete request.authorization
  }

  const response = await fetch(`${url}/organizations`, {
    headers
  })

  let body = await response.text()

  try {
    body = JSON.parse(body)
  } catch (err) {
    // do nothing and keep original body
  }

  return {
    statusCode: response.status,
    headers: response.headers,
    body
  }
}

/**  @type {import('./marketplace-client-types.d.ts').MarketplaceClient['getOrganizations']} */
export const getOrganizations = async (request) => {
  return await _getOrganizations(baseUrl, request)
}
async function _postOrganizations (url, request) {
  const headers = {
    'Content-type': 'application/json; charset=utf-8'
  }
  if (request.authorization !== undefined) {
    headers.authorization = request.authorization
    delete request.authorization
  }

  const response = await fetch(`${url}/organizations`, {
    method: 'POST',
    body: JSON.stringify(request),
    headers
  })

  let body = await response.text()

  try {
    body = JSON.parse(body)
  } catch (err) {
    // do nothing and keep original body
  }

  return {
    statusCode: response.status,
    headers: response.headers,
    body
  }
}

/**  @type {import('./marketplace-client-types.d.ts').MarketplaceClient['postOrganizations']} */
export const postOrganizations = async (request) => {
  return await _postOrganizations(baseUrl, request)
}
async function _putOrganizations (url, request) {
  const headers = {
    'Content-type': 'application/json; charset=utf-8'
  }
  if (request.authorization !== undefined) {
    headers.authorization = request.authorization
    delete request.authorization
  }

  const response = await fetch(`${url}/organizations`, {
    method: 'PUT',
    body: JSON.stringify(request),
    headers
  })

  let body = await response.text()

  try {
    body = JSON.parse(body)
  } catch (err) {
    // do nothing and keep original body
  }

  return {
    statusCode: response.status,
    headers: response.headers,
    body
  }
}

/**  @type {import('./marketplace-client-types.d.ts').MarketplaceClient['putOrganizations']} */
export const putOrganizations = async (request) => {
  return await _putOrganizations(baseUrl, request)
}
async function _deleteOrganizationsOrgId (url, request) {
  const headers = {
    'Content-type': 'application/json; charset=utf-8'
  }
  if (request.authorization !== undefined) {
    headers.authorization = request.authorization
    delete request.authorization
  }

  const response = await fetch(`${url}/organizations/${request.orgId}`, {
    method: 'DELETE',
    body: JSON.stringify(request),
    headers
  })

  let body = await response.text()

  try {
    body = JSON.parse(body)
  } catch (err) {
    // do nothing and keep original body
  }

  return {
    statusCode: response.status,
    headers: response.headers,
    body
  }
}

/**  @type {import('./marketplace-client-types.d.ts').MarketplaceClient['deleteOrganizationsOrgId']} */
export const deleteOrganizationsOrgId = async (request) => {
  return await _deleteOrganizationsOrgId(baseUrl, request)
}
async function _getOrganizationsOrgIdUsers (url, request) {
  const headers = {
    'Content-type': 'application/json; charset=utf-8'
  }
  if (request.authorization !== undefined) {
    headers.authorization = request.authorization
    delete request.authorization
  }

  const response = await fetch(`${url}/organizations/${request.orgId}/users`, {
    headers
  })

  let body = await response.text()

  try {
    body = JSON.parse(body)
  } catch (err) {
    // do nothing and keep original body
  }

  return {
    statusCode: response.status,
    headers: response.headers,
    body
  }
}

/**  @type {import('./marketplace-client-types.d.ts').MarketplaceClient['getOrganizationsOrgIdUsers']} */
export const getOrganizationsOrgIdUsers = async (request) => {
  return await _getOrganizationsOrgIdUsers(baseUrl, request)
}
async function _putOrganizationsOrgIdUsersUserId (url, request) {
  const headers = {
    'Content-type': 'application/json; charset=utf-8'
  }

  const response = await fetch(`${url}/organizations/${request.orgId}/users/${request.userId}`, {
    method: 'PUT',
    body: JSON.stringify(request),
    headers
  })

  let body = await response.text()

  try {
    body = JSON.parse(body)
  } catch (err) {
    // do nothing and keep original body
  }

  return {
    statusCode: response.status,
    headers: response.headers,
    body
  }
}

/**  @type {import('./marketplace-client-types.d.ts').MarketplaceClient['putOrganizationsOrgIdUsersUserId']} */
export const putOrganizationsOrgIdUsersUserId = async (request) => {
  return await _putOrganizationsOrgIdUsersUserId(baseUrl, request)
}
async function _deleteOrganizationsOrgIdUsersUserId (url, request) {
  const headers = {
    'Content-type': 'application/json; charset=utf-8'
  }

  const response = await fetch(`${url}/organizations/${request.orgId}/users/${request.userId}`, {
    method: 'DELETE',
    body: JSON.stringify(request),
    headers
  })

  let body = await response.text()

  try {
    body = JSON.parse(body)
  } catch (err) {
    // do nothing and keep original body
  }

  return {
    statusCode: response.status,
    headers: response.headers,
    body
  }
}

/**  @type {import('./marketplace-client-types.d.ts').MarketplaceClient['deleteOrganizationsOrgIdUsersUserId']} */
export const deleteOrganizationsOrgIdUsersUserId = async (request) => {
  return await _deleteOrganizationsOrgIdUsersUserId(baseUrl, request)
}
async function _postOrganizationsOrgIdInvite (url, request) {
  const headers = {
    'Content-type': 'application/json; charset=utf-8'
  }

  const response = await fetch(`${url}/organizations/${request.orgId}/invite`, {
    method: 'POST',
    body: JSON.stringify(request),
    headers
  })

  let body = await response.text()

  try {
    body = JSON.parse(body)
  } catch (err) {
    // do nothing and keep original body
  }

  return {
    statusCode: response.status,
    headers: response.headers,
    body
  }
}

/**  @type {import('./marketplace-client-types.d.ts').MarketplaceClient['postOrganizationsOrgIdInvite']} */
export const postOrganizationsOrgIdInvite = async (request) => {
  return await _postOrganizationsOrgIdInvite(baseUrl, request)
}
async function _putOrganizationsOrgIdOwner (url, request) {
  const headers = {
    'Content-type': 'application/json; charset=utf-8'
  }

  const response = await fetch(`${url}/organizations/${request.orgId}/owner`, {
    method: 'PUT',
    body: JSON.stringify(request),
    headers
  })

  let body = await response.text()

  try {
    body = JSON.parse(body)
  } catch (err) {
    // do nothing and keep original body
  }

  return {
    statusCode: response.status,
    headers: response.headers,
    body
  }
}

/**  @type {import('./marketplace-client-types.d.ts').MarketplaceClient['putOrganizationsOrgIdOwner']} */
export const putOrganizationsOrgIdOwner = async (request) => {
  return await _putOrganizationsOrgIdOwner(baseUrl, request)
}
async function _getPlugins (url, request) {
  const queryParameters = ['search']
  const searchParams = new URLSearchParams()
  queryParameters.forEach((qp) => {
    if (request[qp]) {
      searchParams.append(qp, request[qp]?.toString() || '')
      delete request[qp]
    }
  })

  const headers = {
    'Content-type': 'application/json; charset=utf-8'
  }

  const response = await fetch(`${url}/plugins?${searchParams.toString()}`, {
    headers
  })

  let body = await response.text()

  try {
    body = JSON.parse(body)
  } catch (err) {
    // do nothing and keep original body
  }

  return {
    statusCode: response.status,
    headers: response.headers,
    body
  }
}

/**  @type {import('./marketplace-client-types.d.ts').MarketplaceClient['getPlugins']} */
export const getPlugins = async (request) => {
  return await _getPlugins(baseUrl, request)
}
async function _getPluginsId (url, request) {
  const headers = {
    'Content-type': 'application/json; charset=utf-8'
  }

  const response = await fetch(`${url}/plugins/${request.id}`, {
    headers
  })

  let body = await response.text()

  try {
    body = JSON.parse(body)
  } catch (err) {
    // do nothing and keep original body
  }

  return {
    statusCode: response.status,
    headers: response.headers,
    body
  }
}

/**  @type {import('./marketplace-client-types.d.ts').MarketplaceClient['getPluginsId']} */
export const getPluginsId = async (request) => {
  return await _getPluginsId(baseUrl, request)
}
async function _getProfile (url, request) {
  const queryParameters = ['refresh']
  const searchParams = new URLSearchParams()
  queryParameters.forEach((qp) => {
    if (request[qp]) {
      searchParams.append(qp, request[qp]?.toString() || '')
      delete request[qp]
    }
  })

  const headers = {
    'Content-type': 'application/json; charset=utf-8'
  }

  const response = await fetch(`${url}/profile?${searchParams.toString()}`, {
    headers
  })

  let body = await response.text()

  try {
    body = JSON.parse(body)
  } catch (err) {
    // do nothing and keep original body
  }

  return {
    statusCode: response.status,
    headers: response.headers,
    body
  }
}

/**  @type {import('./marketplace-client-types.d.ts').MarketplaceClient['getProfile']} */
export const getProfile = async (request) => {
  return await _getProfile(baseUrl, request)
}
async function _getTemplates (url, request) {
  const queryParameters = ['search']
  const searchParams = new URLSearchParams()
  queryParameters.forEach((qp) => {
    if (request[qp]) {
      searchParams.append(qp, request[qp]?.toString() || '')
      delete request[qp]
    }
  })

  const headers = {
    'Content-type': 'application/json; charset=utf-8'
  }
  if (request.authorization !== undefined) {
    headers.authorization = request.authorization
    delete request.authorization
  }
  if (request['x-platformatic-user-api-key'] !== undefined) {
    headers['x-platformatic-user-api-key'] = request['x-platformatic-user-api-key']
    delete request['x-platformatic-user-api-key']
  }

  const response = await fetch(`${url}/templates?${searchParams.toString()}`, {
    headers
  })

  let body = await response.text()

  try {
    body = JSON.parse(body)
  } catch (err) {
    // do nothing and keep original body
  }

  return {
    statusCode: response.status,
    headers: response.headers,
    body
  }
}

/**  @type {import('./marketplace-client-types.d.ts').MarketplaceClient['getTemplates']} */
export const getTemplates = async (request) => {
  return await _getTemplates(baseUrl, request)
}
async function _getTemplatesId (url, request) {
  const headers = {
    'Content-type': 'application/json; charset=utf-8'
  }

  const response = await fetch(`${url}/templates/${request.id}`, {
    headers
  })

  let body = await response.text()

  try {
    body = JSON.parse(body)
  } catch (err) {
    // do nothing and keep original body
  }

  return {
    statusCode: response.status,
    headers: response.headers,
    body
  }
}

/**  @type {import('./marketplace-client-types.d.ts').MarketplaceClient['getTemplatesId']} */
export const getTemplatesId = async (request) => {
  return await _getTemplatesId(baseUrl, request)
}
async function _deleteTemplatesId (url, request) {
  const headers = {
    'Content-type': 'application/json; charset=utf-8'
  }
  if (request.authorization !== undefined) {
    headers.authorization = request.authorization
    delete request.authorization
  }

  const response = await fetch(`${url}/templates/${request.id}`, {
    method: 'DELETE',
    body: JSON.stringify(request),
    headers
  })

  let body = await response.text()

  try {
    body = JSON.parse(body)
  } catch (err) {
    // do nothing and keep original body
  }

  return {
    statusCode: response.status,
    headers: response.headers,
    body
  }
}

/**  @type {import('./marketplace-client-types.d.ts').MarketplaceClient['deleteTemplatesId']} */
export const deleteTemplatesId = async (request) => {
  return await _deleteTemplatesId(baseUrl, request)
}
async function _postTemplatesId (url, request) {
  const headers = {
    'Content-type': 'application/json; charset=utf-8'
  }
  if (request.authorization !== undefined) {
    headers.authorization = request.authorization
    delete request.authorization
  }

  const response = await fetch(`${url}/templates/${request.id}`, {
    method: 'POST',
    body: JSON.stringify(request),
    headers
  })

  let body = await response.text()

  try {
    body = JSON.parse(body)
  } catch (err) {
    // do nothing and keep original body
  }

  return {
    statusCode: response.status,
    headers: response.headers,
    body
  }
}

/**  @type {import('./marketplace-client-types.d.ts').MarketplaceClient['postTemplatesId']} */
export const postTemplatesId = async (request) => {
  return await _postTemplatesId(baseUrl, request)
}
async function _postTemplatesVerify (url, request) {
  const headers = {
    'Content-type': 'application/json; charset=utf-8'
  }
  if (request.authorization !== undefined) {
    headers.authorization = request.authorization
    delete request.authorization
  }

  const response = await fetch(`${url}/templates/verify`, {
    method: 'POST',
    body: JSON.stringify(request),
    headers
  })

  let body = await response.text()

  try {
    body = JSON.parse(body)
  } catch (err) {
    // do nothing and keep original body
  }

  return {
    statusCode: response.status,
    headers: response.headers,
    body
  }
}

/**  @type {import('./marketplace-client-types.d.ts').MarketplaceClient['postTemplatesVerify']} */
export const postTemplatesVerify = async (request) => {
  return await _postTemplatesVerify(baseUrl, request)
}
async function _postTemplatesCreate (url, request) {
  const headers = {
    'Content-type': 'application/json; charset=utf-8'
  }
  if (request.authorization !== undefined) {
    headers.authorization = request.authorization
    delete request.authorization
  }

  const response = await fetch(`${url}/templates/create`, {
    method: 'POST',
    body: JSON.stringify(request),
    headers
  })

  let body = await response.text()

  try {
    body = JSON.parse(body)
  } catch (err) {
    // do nothing and keep original body
  }

  return {
    statusCode: response.status,
    headers: response.headers,
    body
  }
}

/**  @type {import('./marketplace-client-types.d.ts').MarketplaceClient['postTemplatesCreate']} */
export const postTemplatesCreate = async (request) => {
  return await _postTemplatesCreate(baseUrl, request)
}
async function _patchTemplatesIdNpmPackage (url, request) {
  const headers = {
    'Content-type': 'application/json; charset=utf-8'
  }
  if (request.authorization !== undefined) {
    headers.authorization = request.authorization
    delete request.authorization
  }

  const response = await fetch(`${url}/templates/${request.id}/npm_package`, {
    method: 'PATCH',
    body: JSON.stringify(request),
    headers
  })

  let body = await response.text()

  try {
    body = JSON.parse(body)
  } catch (err) {
    // do nothing and keep original body
  }

  return {
    statusCode: response.status,
    headers: response.headers,
    body
  }
}

/**  @type {import('./marketplace-client-types.d.ts').MarketplaceClient['patchTemplatesIdNpmPackage']} */
export const patchTemplatesIdNpmPackage = async (request) => {
  return await _patchTemplatesIdNpmPackage(baseUrl, request)
}
async function _getTerms (url, request) {
  const headers = {
    'Content-type': 'application/json; charset=utf-8'
  }
  if (request.authorization !== undefined) {
    headers.authorization = request.authorization
    delete request.authorization
  }

  const response = await fetch(`${url}/terms`, {
    headers
  })

  let body = await response.text()

  try {
    body = JSON.parse(body)
  } catch (err) {
    // do nothing and keep original body
  }

  return {
    statusCode: response.status,
    headers: response.headers,
    body
  }
}

/**  @type {import('./marketplace-client-types.d.ts').MarketplaceClient['getTerms']} */
export const getTerms = async (request) => {
  return await _getTerms(baseUrl, request)
}
async function _postTerms (url, request) {
  const headers = {
    'Content-type': 'application/json; charset=utf-8'
  }
  if (request.authorization !== undefined) {
    headers.authorization = request.authorization
    delete request.authorization
  }

  const response = await fetch(`${url}/terms`, {
    method: 'POST',
    body: JSON.stringify(request),
    headers
  })

  let body = await response.text()

  try {
    body = JSON.parse(body)
  } catch (err) {
    // do nothing and keep original body
  }

  return {
    statusCode: response.status,
    headers: response.headers,
    body
  }
}

/**  @type {import('./marketplace-client-types.d.ts').MarketplaceClient['postTerms']} */
export const postTerms = async (request) => {
  return await _postTerms(baseUrl, request)
}
async function _postUsers (url, request) {
  const headers = {
    'Content-type': 'application/json; charset=utf-8'
  }
  if (request.authorization !== undefined) {
    headers.authorization = request.authorization
    delete request.authorization
  }

  const response = await fetch(`${url}/users`, {
    method: 'POST',
    body: JSON.stringify(request),
    headers
  })

  let body = await response.text()

  try {
    body = JSON.parse(body)
  } catch (err) {
    // do nothing and keep original body
  }

  return {
    statusCode: response.status,
    headers: response.headers,
    body
  }
}

/**  @type {import('./marketplace-client-types.d.ts').MarketplaceClient['postUsers']} */
export const postUsers = async (request) => {
  return await _postUsers(baseUrl, request)
}
export default function build (url) {
  return {
    getOrganizations: _getOrganizations.bind(url, ...arguments),
    postOrganizations: _postOrganizations.bind(url, ...arguments),
    putOrganizations: _putOrganizations.bind(url, ...arguments),
    deleteOrganizationsOrgId: _deleteOrganizationsOrgId.bind(url, ...arguments),
    getOrganizationsOrgIdUsers: _getOrganizationsOrgIdUsers.bind(url, ...arguments),
    putOrganizationsOrgIdUsersUserId: _putOrganizationsOrgIdUsersUserId.bind(url, ...arguments),
    deleteOrganizationsOrgIdUsersUserId: _deleteOrganizationsOrgIdUsersUserId.bind(url, ...arguments),
    postOrganizationsOrgIdInvite: _postOrganizationsOrgIdInvite.bind(url, ...arguments),
    putOrganizationsOrgIdOwner: _putOrganizationsOrgIdOwner.bind(url, ...arguments),
    getPlugins: _getPlugins.bind(url, ...arguments),
    getPluginsId: _getPluginsId.bind(url, ...arguments),
    getProfile: _getProfile.bind(url, ...arguments),
    getTemplates: _getTemplates.bind(url, ...arguments),
    getTemplatesId: _getTemplatesId.bind(url, ...arguments),
    deleteTemplatesId: _deleteTemplatesId.bind(url, ...arguments),
    postTemplatesId: _postTemplatesId.bind(url, ...arguments),
    postTemplatesVerify: _postTemplatesVerify.bind(url, ...arguments),
    postTemplatesCreate: _postTemplatesCreate.bind(url, ...arguments),
    patchTemplatesIdNpmPackage: _patchTemplatesIdNpmPackage.bind(url, ...arguments),
    getTerms: _getTerms.bind(url, ...arguments),
    postTerms: _postTerms.bind(url, ...arguments),
    postUsers: _postUsers.bind(url, ...arguments)
  }
}
